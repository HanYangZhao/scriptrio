var config = require("../config");
var resolutionModule = require("./resolution");

function ResolutionManager(dto) {
    if (!dto || !dto.client) {
        throw {
            errorCode: config.errorCodeList['missingParameter'],
            errorDetail: "dto.client cannot be null or empty"
        };
    }

    for(key in dto){
        this[key] = dto[key];
    }
    
}

/**
 * @method listResolutions
 * @return{Array} of Resolution instances
 */
ResolutionManager.prototype.listResolutions = function(params) {
    var requestParams  = {
        url: config.clientUrlPrefix + "/resolutions",
        method: "GET"
    }

    var data = this.client.callApi(requestParams);
    var list = [];
    for (var i = 0; data && i < data.length; i++) {
        var dto = data[i];
        dto.client = this.client;
        if(params && params.id){
            if(params.id == dto["Id"]){
                return new resolutionModule.Resolution(dto);
            }
        }else{
            var resolution = new resolutionModule.Resolution(dto);
            list.push(resolution);
        }
    }
    
    return list;
};

/**
 * @method getResolution
 * @return{Array} of a specific Resolution instance
 */
ResolutionManager.prototype.getResolution = function(params) {
    if (!params || !params.id) {
        throw {
            errorCode: config.errorCodeList['missingParameter'],
            errorDetail: "id cannot be null or empty."
        };
    }
    
    var result =  this.listResolutions({id: params.id })
    if(!result){
        throw {
            errorCode: config.errorCodeList['resolutionNotFound'],
            errorDetail: "Resolution id not found."
        };
    }
    
    return result;
};


