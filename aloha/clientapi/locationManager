var config = require("../config");
var locationModule = require("./location");

/**
 * Wraps part of the location API.
 * @class Location
 * @constructor Location
 * @param {Object} [dto]
 * @param {Object} [dto.client]: instance of the Client class (mandatory)
 * @param {Object} [dto.Id]: identifier of the location (mandatory)
 */
function LocationManager(dto) { 
    if (!dto || !dto.client) {
        throw {
            errorCode: config.errorCodeList['missingParameter'],
            errorDetail: "dto.client cannot be null or empty"
        };
    }

    for(key in dto){
        this[key] = dto[key];
    }
    
} 

/**
 * List all locations of a given account, or sub-locations of a given location if provided
 * @param {Object} [params]
 * @param {String} id: location id (optional)
 * @return {Array} list of Location instances
 */
LocationManager.prototype.listLocations = function(params){
    var url = config.clientUrlPrefix + "/locations/";
    if(params && params.id){
        url = url + params.id +"/sublocations/"
    }
     var requestParams  = {
        url: url,
        method: "GET"
    }
	
    var data = this.client.callApi(requestParams);
    var list = [];
    for (var i = 0; data && i < data.length; i++) {
        var dto = data[i];
        dto.client = this.client;
        var location = new locationModule.Location(dto);
        list.push(location);
    }
    
    return list;
};

/**
 * Return a location by name
 * @method getLocationByName
 * @param {Object} [params]
 * @param {String} id: location id (optional)
 * @return {Array} list of Location instances
 */
LocationManager.prototype.getLocationByName = function(name){
    
    if (!name) {
        throw {
            errorCode: config.errorCodeList['missingParameter'],
            errorDetail: "name cannot be null or empty."
        };
    }
    
    var location = null;
    var locations = this.listLocations();
    for (var i = 0; !location && i < locations.length; i++) {
        location = locations[i].Name == name ? locations[i] : null;
    }
    
    if (!location){
         throw {
            errorCode: config.errorCodeList['notFound'],
            errorDetail: "Coud not find a location with name " + name
        };
    }
    
    return location;
};

LocationManager.prototype.listChildLocations = function(params){
    if (!params || !params.id) {
        throw {
            errorCode: config.errorCodeList['missingParameter'],
            errorDetail: "id cannot be null or empty."
        };
    }
    return this.listLocations(params)
};
