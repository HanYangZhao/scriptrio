var config = require("../config");
var utils = require("../utils");

function Sensor(dto) {
    if (!dto || !dto.client) {
        throw {
            errorCode: config.errorCodeList['missingParameter'],
            errorDetail: "dto.client cannot be null or empty"
        };
    }
    
    if (!dto || !dto.Id) {
        throw {
            errorCode: config.errorCodeList['missingParameter'],
            errorDetail: "dto.Id cannot be null or empty"
        };
    }
    
    for(key in dto){
        this[key] = dto[key];
    }
    
    this.id = dto['Id'];
}

Sensor.prototype.listMeasurementsByResolution = function(params) {
    if (!params || !params.resolutionId) {
        throw {
            errorCode: config.errorCodeList['missingParameter'],
            errorDetail: "resolutionId cannot be null or empty"
        };
    }
    
    var url = config.clientUrlPrefix + "/sensors/"+ this.id + "/resolutions/"+ params.resolutionId + "/measurements";

    var qsParams = {
        "startTime":params.startTime,
        "endTime":params.endTime,
        "maximumNumberOfDataPoints":params.maximumNumberOfDataPoints  
    }
        
    url = utils.addQSParm(url, qsParams);
    
    var requestParams  = {
        url:url ,
        method: "GET"
    }
    
    var data = this.client.callApi(requestParams);
    return data;
};

Sensor.prototype.listMeasurements = function() {
    var requestParams  = {
        url: config.clientUrlPrefix + "/sensors/"+ this.id + "/measurements",
        method: "GET"
    }

    var data = this.client.callApi(requestParams);
    return data.v;
};


Sensor.prototype.getMeasurement = function() {
    var requestParams  = {
        url: config.clientUrlPrefix + "/sensors/"+ this.id + "/measurement",
        method: "GET"
    }

    var data = this.client.callApi(requestParams);
    return data;
};