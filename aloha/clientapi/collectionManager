var config = require("../config");
var collectionModule = require("./collection");
var utils = require("../utils");

function CollectionManager(dto) {
    if (!dto || !dto.client) {
        throw {
            errorCode: config.errorCodeList['missingParameter'],
            errorDetail: "dto.client cannot be null or empty"
        };
    }

    for(key in dto){
        this[key] = dto[key];
    }
    
}

CollectionManager.prototype.getCollection = function(params){
    if (!params || !params.Id) {
        throw {
            errorCode: config.errorCodeList['missingParameter'],
            errorDetail: "Id cannot be null or empty"
        };
    }
    
    params.client = this.client;
    var collection = new collectionModule.Collection(params);
    return collection;
}

CollectionManager.prototype.listSensorsInCollection = function(params){
    if(!params ||  !params["collectionId"]){
        throw {
            errorCode: config.errorCodeList['missingParameter'],
            errorDetail: "collectionId cannot be null or empty"
        };
    }
    var url =  config.clientUrlPrefix + "/sensorcollections/" + params.collectionId + "/sensors";
    
    var requestParams  = {
        url: url ,
        method: "GET"
    }

    var data = this.client.callApi(requestParams);
    var list = [];
    for (var i = 0; data && i < data.length; i++) {
        var dto = data[i];
        dto.client = this.client;
        var collection = new collectionModule.Sensor(dto);
        list.push(collection);
    }
    
    return list;
}


CollectionManager.prototype.listCollectionsInLocation = function(params){ 
    if(!params ||  !params["locationId"]){
        throw {
            errorCode: config.errorCodeList['missingParameter'],
            errorDetail: "locationId cannot be null or empty"
        };
    }
    var url =  config.clientUrlPrefix + "/locations/" + params.locationId + "/sensorCollections";
    
    url = utils.addQSParm(url, {
        "Page" : params["Page"],
        "PageSize" : params["PageSize"],
        "Filter" : params["Filter"],
        "Sort": params["Sort"],
        "Search":params["Search"]
    });
    
    var requestParams  = {
        url: url ,
        method: "GET"
    }

    var result = this.client.callApi(requestParams);
	var data = result.Rows;
    var list = [];
    for (var i = 0; data && i < data.length; i++) {
        var dto = data[i];
        dto.client = this.client;
        var collection = new collectionModule.Collection(dto);
        list.push(collection);
    }
    
    return list;
}
