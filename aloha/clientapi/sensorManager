var config = require("../config");
var sensorModule = require("./sensor");
var utils = require("../utils");

function SensorManager(dto) {
    if (!dto || !dto.client) {
        throw {
            errorCode: config.errorCodeList['missingParameter'],
            errorDetail: "dto.client cannot be null or empty"
        };
    }

    for(key in dto){
        this[key] = dto[key];
    }
    
}

/**
 * @method getSensor
 * @return sensor instances
 * @throws missing_parameter exception.
 */
SensorManager.prototype.getSensor = function(params){
    if(!params ||  !params["Id"]){
        throw {
            errorCode: config.errorCodeList['missingParameter'],
            errorDetail: "Id cannot be null or empty"
        };
    }

    params.client = this.client;
    var sensor = new sensorModule.Sensor(params);

    return sensor;
}


/**
 * List all the sensors of a specific collection.
 * @params{JSON} params.collectionId is mandatory.
 * @method listSensorsInCollection
 * @return{Array} sensors instances.
 * @throws missing_parameter exception.
 */
SensorManager.prototype.listSensorsInCollection = function(params){
    if(!params ||  !params["collectionId"]){
        throw {
            errorCode: config.errorCodeList['missingParameter'],
            errorDetail: "collectionId cannot be null or empty"
        };
    }
    var url =  config.clientUrlPrefix + "/sensorcollections/" + params.collectionId + "/sensors";
    
    var requestParams  = {
        url: url ,
        method: "GET"
    }

    var data = this.client.callApi(requestParams);
    var list = [];
    for (var i = 0; data && i < data.length; i++) {
        var dto = data[i];
        dto.client = this.client;
        var sensor = new sensorModule.Sensor(dto);
        list.push(sensor);
    }
    
    return list;
}
