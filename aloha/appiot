/**
 * Factory to access all other API wrappers
 * @module appiot
 */

var collectionmgt = require("./clientapi/collectionManager");
var consumermgt = require("./clientapi/consumerManager");
var locationmgt = require("./clientapi/locationManager");
var resolutionmgt = require("./clientapi/resolutionManager");
var sensormgt = require("./clientapi/sensorManager");
var clientModule = require("./client");
var configModule = require("./config");

/**
 * @class AppIoT
 * @constructor AppIoT
 * @param {Object} [config] : can contain token, adminToken and prefixUrl. Default values are specific in ./config
 */
function AppIoT(config) {
    
    if (config) {
        
        for(var key in config){
            this[key] = config[key]
        }
    }
   
    this.token = this.token ? this.token : configModule.token;
    this.adminToken = this.adminToken ? this.adminToken : configModule.adminToken;
    this.client = new clientModule.Client({token:this.token});
}

AppIoT.prototype.getCollectionManager = function() {
  
    if (!this.collectionManager) {
        this.collectionManager = new collectionmgt.CollectionManager({client:this.client});
    }
    
    return this.collectionManager;
};

AppIoT.prototype.getConsumerManager = function() {
  
    var adminClient = new Client({token:this.adminToken});
    if (!this.consumerManager) {
        this.cosumernManager = new consumermgt.ConsumerManager({client:adminClient});
    }
    
    return this.consumerManager;
};

AppIoT.prototype.getLocationManager = function() {
  
    if (!this.locationManager) {
        this.locationManager = new locationmgt.LocationManager({client:this.client});
    }
    
    return this.locationManager;
};

AppIoT.prototype.getResolutionManager = function() {
  
    if (!this.resolutionManager) {
        this.resolutionManager = new resolutionmgt.ResolutionManager({client:this.client});
    }
    
    return this.resolutionManager;
};

AppIoT.prototype.getSensorManager = function() {
  
    if (!this.sensorManager) {
        this.sensorManager = new sensormgt.SensorManager({client:this.client});
    }
    
    return this.sensorManager;
};